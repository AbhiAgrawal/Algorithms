
class Solution:
    def longestOnes(self, nums: List[int], k: int) -> int:
        # same as https://leetcode.com/problems/longest-repeating-character-replacement/ except this line if (((r-l+1) - countMap[1]) <= k) here you are not comparing most common count map but you are comparing counte [1]
        
        l = 0
        n = len(nums)
        max_length = k ### max length will be atleast k 
        r = k ##so initially setting l = 0, and r to k
        countMap = Counter(nums[l:r+1]) ##making the map from l to r ( both inclusive)
        
        while (r < n):
            if (((r-l+1) - countMap[1]) <= k): ## countMap.most_common(1)[0][1] returns max value in the counter 
                max_length = max(r-l+1, max_length) ### compare len of sub arr and max lenght
                r+=1 ## increment r if u got valid subarr
                if (r<n): ##if incrementing r then make sure to update counter.. also check the r < n
                    countMap[nums[r]]+=1      
            else:
                countMap[nums[l]]-=1 ## otherwise increment l parallely remove the lth element from counter
                l+=1       
        return max_length     
        
        
        
        
