# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    ###exactly same as https://leetcode.com/problems/binary-tree-level-order-traversal/  
    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        if root is None:
            return []
        
        levels = []
        
        queue = deque()
        level_length = 0
        level = 0
        queue.append(root)
        while queue:
            level_length = len(queue)
            levels.append([])
            
            for i in range(level_length):
                node = queue.popleft()
                for child in [node.left,node.right]:
                    if child:
                        queue.append(child)
                levels[level].append(node.val)
            level +=1
            
        #####below lines are only differeny from binary-tree-level-order-traversal/     
        if len(levels) <= 1:
            return levels
        ### from 1 to len -1 reverse the list incr by 2
        for i in range(1,len(levels),2):
            levels[i] = levels[i][::-1]
            
        return levels
            
            
        
