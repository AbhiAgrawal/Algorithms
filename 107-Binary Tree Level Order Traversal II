# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    ###exactly same as https://leetcode.com/problems/binary-tree-level-order-traversal/  
    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:
        if root is None:
            return []
        
        levels = []
        
        queue = deque()
        level_length = 0
        level = 0
        queue.append(root)
        while queue:
            level_length = len(queue)
            levels.append([])
            
            for i in range(level_length):
                node = queue.popleft()
                if node.left is not None:
                    queue.append(node.left)
                if node.right is not None:
                    queue.append(node.right)
                levels[level].append(node.val)
            level +=1
        return levels[::-1] ######### This is the only differece .. jsut reverse it
            
            
        
