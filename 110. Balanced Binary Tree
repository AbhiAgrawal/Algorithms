# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    # just check editorial solution TC o(nlogn) SC(0(n))
    def depth(self, root: Optional[TreeNode]) -> int:
        if root == None:
            return 0
        return 1+max(self.depth(root.left), self.depth(root.right))    


    def isBalanced(self, root: Optional[TreeNode]) -> bool:
        if root == None:
            return True
        left=self.depth(root.left)
        right=self.depth(root.right)    
        return abs(left-right)<=1 and self.isBalanced(root.left) and self.isBalanced(root.right)
        
