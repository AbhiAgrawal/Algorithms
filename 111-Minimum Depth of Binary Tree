        # Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
        ###exactly same as https://leetcode.com/problems/binary-tree-level-order-traversal/  

    def minDepth(self, root: Optional[TreeNode]) -> int:
        """
        :type root: TreeNode
        :rtype: List[float]
        """
        levels = []
        if root is None:
            return 0
        level_length = 0
        level = 0
        queue = deque()
        queue.append(root)
        while queue:
            level_length = len(queue)
            levels.append([])     
            for i in range(level_length):
                node = queue.popleft()
                levels[level].append(node.val)
                
                ####below 2 lines are different
                if node.left is None and node.right is None:
                    return level+1
                
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            level+=1
        #####return the level
        
        return level+1    
            
        
