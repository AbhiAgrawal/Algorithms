# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    ### same as https://leetcode.com/problems/path-sum/
    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> List[List[int]]:
        pathList = []
        self.recurseTree(root,targetSum,[],pathList)
        return pathList
    
    def recurseTree(self, root: Optional[TreeNode], sum: int, path:List[int], pathList:List[List[int]]) -> None:
        if root is None:
            return
        path.append(root.val)
        sum-=root.val
        if root.left is None and root.right is None and sum == 0:
            pathList.append(list(path))                            
        else:    
            self.recurseTree(root.left, sum, path, pathList)
            self.recurseTree(root.right, sum, path, pathList)
        path.pop() 
    
    
    ####iterative mode
    def pathSum1(self, root: Optional[TreeNode], sum: int) -> List[List[int]]:
        root_to_leaf = []
        stack = []
        stack.append((root,[],sum))
        
        while stack:
            root, path,sum = stack.pop()
            if root is not None:
                path.append(root.val)
                sum-=root.val
                if root.left is None and root.right is None and sum == 0:
                    root_to_leaf.append(list(path))
                else:    
                    stack.append((root.right, list(path), sum))    
                    stack.append((root.left, list(path), sum))
                  
        return root_to_leaf    
