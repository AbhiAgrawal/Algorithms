class Solution:
    #https://www.youtube.com/watch?v=4Urd0a0BNng&list=PL_z_8CaSLPWekqhdCPmFohncHwz8TY2Go&index=19
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        
        return self.calcMaxLenLongComSubseqTable(text1, len(text1), text2, len(text2))
        
    #below is the recursive version
    def calcMaxLenLongComSubseq(self, text1: str, n: int, text2: str, m: int) -> int:
        
        if n == 0 or m == 0:
            return 0
        else:
            if text1[n-1] == text2[m-1]:
                return 1 + self.calcMaxLenLongComSubseq(text1, n-1, text2, m-1)
            else:
                return max(self.calcMaxLenLongComSubseq(text1, n-1, text2, m), self.calcMaxLenLongComSubseq(text1, n, text2, m-1))
            
    def calcMaxLenLongComSubseqTable(self, text1: str, n: int, text2: str, m: int) -> int:
        DP = [[0 for i in range(m+1)] for j in range(n+1)]
        for i in range(n+1):
            for j in range(m+1):
                if(i == 0 or j == 0):
                    DP[i][j] = 0
                elif(text1[i-1] == text2[j-1]):
                    DP[i][j] = 1 + DP[i-1][j-1]
                else:
                    DP[i][j] = max(DP[i-1][j],DP[i][j-1])
        return DP[n][m]            
            
