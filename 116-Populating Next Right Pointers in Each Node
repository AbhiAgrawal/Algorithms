"""
# Definition for a Node.
class Node:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""
    ### same as https://leetcode.com/problems/binary-tree-level-order-traversal/  with slight changes

class Solution:
    def connect(self, root: 'Node') -> 'Node':
        """
        :type root: TreeNode
        :rtype: List[float]
        """
        levels = []
        if root is None:
            return root
        level_length = 0
        level = 0
        queue = deque()
        queue.append(root)
        while queue:
            level_length = len(queue)
            levels.append([])     
            for i in range(level_length):
                node = queue.popleft()
                levels[level].append(node) ###append the node
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
                    
            level+=1
            
        #####return the node
        for row in range(1,len(levels)):
            if(len(levels[row]) > 1):
                for i in range(len(levels[row]) - 1):
                    levels[row][i].next = levels[row][i+1]  

        return root 
            
        
        
