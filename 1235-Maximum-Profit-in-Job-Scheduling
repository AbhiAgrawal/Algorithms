class Solution:
    
    ###https://www.youtube.com/watch?v=3kU7VYcmffU&ab_channel=AlgorithmsMadeEasy this is very nicely explained
    ####time complexity O(nlogn) space O(n)
    def __init__(self):
        self.memo = {}
    def jobScheduling(self, startTime: List[int], endTime: List[int], profit: List[int]) -> int:
        
        if(len(startTime) == 1):
            return profit[0] 
        #zip is used make the 3 arrays as tuple . this will helpful for sorting
        #first we want to sort based on end time    
        jobs = list(zip(endTime, startTime, profit))
        jobs.sort()
        
        #get back start end and profit
        (endlist, startlist, profitlist) = zip(*jobs)
        
        ##maintain 2 lists.. in vidoe, they are maintainming one treemap instead we are maintaining 2 lists
        dp_end = list()
        dp_end.append(0)
        
        dp_maxprofit= list()
        dp_maxprofit.append(0)
        
        for i, end in enumerate(endlist):

            # 'Find rightmost value less than or equal to x'
            # i = bisect_right(a, x)
            # if i:
            #     return a[i-1]
            # raise ValueError
            ###we are looking for right most value less than equal to startlist[i]
            j = bisect.bisect_right(dp_end, startlist[i]) 
            profit = profitlist[i]+dp_maxprofit[j-1]
            if(profit> dp_maxprofit[-1]): ###check the new profit calculated with last entry in dp
                dp_end.append(end)
                dp_maxprofit.append(profit)
        return dp_maxprofit[-1]
            
        
        
        
        
    
    
    
