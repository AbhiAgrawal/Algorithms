class Solution:
    #smart solution https://leetcode.com/problems/word-ladder/solutions/346920/python3-breadth-first-search/
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        queue=deque()
        if endWord not in wordList or not beginWord or not endWord or not wordList:
            return 0
        all_combo_dict=defaultdict(list)
        L=len(beginWord)

        ##create all_combo_dict check the link why its used
        for word in wordList:
            for i in range(L):
                all_combo_dict[word[:i]+"*"+word[i+1:]].append(word)

        queue.append([beginWord,1])
        visited=set()
        visited.add(beginWord)
        while queue:
            curr,level = queue.popleft()
            for i in range(L):
                int_word=curr[:i]+"*"+curr[i+1:]
                for word in all_combo_dict[int_word]:
                    if word==endWord:
                        return level+1
                    if word not in visited:
                        visited.add(word)
                        queue.append([word,level+1])
        return 0
