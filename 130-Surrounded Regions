class Solution:
     #get all border r, c for which node is O. then run bfs on all those nodes and mark them E for all adjoining Os
    #finally mark all Os (that is part of border O) to X and all Es to O
    def solve(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        if len(board) == 0 or len(board[0]) == 0:
            return None
        rowC = len(board)
        colC = len(board[0])

        ##run through top and bottom boundary
        for i in [0,rowC-1]:
            for j in range(colC):
                if board[i][j] == 'O':
                    board[i][j] = 'E'
                    self.bfs(board,i,j,rowC, colC)

        ##run through left and right boundary
        for i in range(rowC):
            for j in [0,colC-1]:
                if board[i][j] == 'O':
                    board[i][j] = 'E'
                    self.bfs(board,i,j,rowC, colC)
        
        for i in range(rowC):
            for j in range(colC):
                if board[i][j] == 'O':
                    board[i][j] = 'X'
                if board[i][j] == 'E':         
                    board[i][j] = 'O'

        return

    def bfs(self, board: List[List[str]], row: int, col: int, len_rows:int, len_cols:int) ->None:
        q=deque()
        q.append([row,col])
        while q:
            r,c = q.popleft()
            for xr,xc in [[-1,0],[1,0],[0,-1],[0,1]]:
                if 0<=r+xr<len_rows and 0<=c+xc<len_cols and board[r+xr][c+xc]=='O':
                    q.append([r+xr,c+xc])
                    board[r+xr][c+xc] = 'E'
        
