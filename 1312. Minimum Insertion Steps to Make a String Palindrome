class Solution:
    ###https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/discuss/470706/JavaC%2B%2BPython-Longest-Common-Sequence
    ##n-dp[i][j].. means n-longest common subsequence between s and reversed(s)
    def minInsertions(self, s: str) -> int:
        n=len(s)
        dp=[[0] * (n + 1) for _i in range(n+1)]
        s1=s
        s2=s[::-1] ##reverse of string

        for i in range(1,n+1):
            for j in range(1,n+1):
                if s1[i-1] == s2[j-1]:
                    dp[i][j] = dp[i-1][j-1]+1
                else:
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1])
        return n-dp[n][n]           
        
        
        return 0
        
        
