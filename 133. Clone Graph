"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""

class Solution:
    ##simialr to https://leetcode.com/problems/copy-list-with-random-pointer/
    ### use leetcode soln bfs
    ###visited key is old node and value is copied node
    def cloneGraph(self, node: 'Node') -> 'Node':
        if not node:
            return node
        visited={}
        queue=deque()
        queue.append(node)
        visited[node] = Node(node.val)
        while queue:
            n = queue.popleft()

            for neighbour in n.neighbors:
                if neighbour not in visited:
                    queue.append(neighbour)

                    visited[neighbour] = Node(neighbour.val)
                visited[n].neighbors.append(visited[neighbour])
                
        return visited[node]       
                
                
            
        
