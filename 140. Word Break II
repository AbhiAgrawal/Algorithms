class Solution:

    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:
        
        # quick check on the characters,
        #   otherwise it would exceed the time limit for certain test cases.
        ### below if checks if there is a character which is not in wordDict.. its like checking size
        ###print(set(Counter(s).keys()))
        ###print(set(Counter("".join(wordDict)).keys()))
        if set(Counter(s).keys()) > set(Counter("".join(wordDict)).keys()):
            return []

        wordSet = set(wordDict) ###for easy look up

        dp = [[]] * (len(s)+1)
        dp[0] = [""]
        

        for endIndex in range(1, len(s)+1):
            sublist = []
            # fill up the values in the dp array.
            for startIndex in range(endIndex):
                word = s[startIndex:endIndex]
                if word in wordSet:
                    for subsentence in dp[startIndex]:
                        sublist.append((subsentence + ' ' + word).strip())

            dp[endIndex] = sublist
        #print(dp)
        return dp[len(s)]



###inspired from neet code soution of 139 word break
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:
        dp = [False]*(len(s)+1)
        dp[len(s)]=True#### base case
        results=[]
        for i in range(len(s)+1):
            results.append([])
        results[len(s)].append("")
        for i in range(len(s)-1,-1,-1):
            for w in wordDict:
                lenW = len(w)
                if i+lenW <=len(s) and s[i:i+lenW]==w:
                    dp[i]=dp[i+lenW]
                    for word in results[i+lenW]:
                        results[i].append((s[i:i+lenW]+" "+word).strip())

        
        return results[0]
        
