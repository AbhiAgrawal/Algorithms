# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reorderList(self, head: Optional[ListNode]) -> None:
        """
        Do not return anything, modify head in-place instead.
        """
        # if number of items is less than equal to 2
        if head is None or head.next is None or head.next.next is None:
            return head
        ## middle of linked list
        ## reverse a list
        ## merge two sorted lists
        
        ##middle of linked list
        
        slow= fast = head
        while fast and fast.next:
            
            prev = slow
            slow = slow.next
            fast = fast.next.next
        prev.next = None
        
        head1 = head
        head2 = slow
        ##reverse linked list
        head2 = self.reverseList(head2)
        
        
        #merge two list
        finalHead = head1
        while(head1 is not None and head2 is not None):
            temp1=head1.next
            temp2 = head2.next
            head1.next=head2
            if(temp1 is not None):
                head2.next=temp1
            head1=temp1
            head2=temp2
       
        return finalHead
        
            
        
        
        
        
        
        
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if head is None or head.next is None:
            return head
        curr = head
        prev = None
        while curr.next is not None:
            temp = curr
            curr = curr.next
            temp.next = prev
            prev = temp
        curr.next = prev
        return curr   
        
        
        
        
