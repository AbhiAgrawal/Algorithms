class LRUCache:
    ##i m using ordereddict 
    ## for hashmap and deque checkout https://leetcode.com/problems/lru-cache/solution/437570

    def __init__(self, capacity: int):
        self.size=capacity
        self.dict = collections.OrderedDict()
        

    def get(self, key: int) -> int:
        if key in self.dict.keys():
            self.move_to_end(key,self.dict[key])
            return self.dict[key]
        return -1
            

    def put(self, key: int, value: int) -> None:
        if key in self.dict.keys():##move to end and update
            self.move_to_end(key, value)
        else:
            self.dict[key] = value
            if len(self.dict.keys()) > self.size: ##delete first entry
                #popitem(last=True).The popitem() method for ordered dictionaries returns and removes a (key, value) pair. The pairs are returned in LIFO order if last is true or FIFO order if false.
                k,v = self.dict.popitem(False) ###chekc the syntax
     
    def move_to_end(self, key: int, val: int) -> None:
        del self.dict[key]
        self.dict[key] = val
        


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
