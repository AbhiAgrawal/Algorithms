class Solution:
    #basically as soon as you see 1 increase number_of_islands and run BFS from that node and mark all adjacent 1s basically entire island to 0. then pick up next node which is 1 (that is new island), repeat the same. you will total numbner of islands
 
    def numIslands(self, grid: List[List[str]]) -> int:
        #return len(grid)
        number_of_islands = 0
        if len(grid) == 0:
            return 0
        
        m = len(grid)
        n = len(grid[0])
        dirs = [[0,1],[0,-1],[1,0],[-1,0]]
    
        def markAllAdjacentCellsAsVisited(grid, r, c):   
            queue = []
            grid[r][c]='0'
            queue.append([r,c])
            while queue:
                r1, c1 = queue.pop(0)
                for x,y in dirs:
                    nr, nc = r1+x, c1+y
                    if 0<=nr<m and 0<=nc<n and grid[nr][nc] == '1':
                        grid[nr][nc]='0'
                        queue.append([nr, nc])
                    
        for r in range(m):
            for c in range(n):
                if grid[r][c]=='1':
                    number_of_islands += 1
                    markAllAdjacentCellsAsVisited(grid,r,c)
        return number_of_islands          
