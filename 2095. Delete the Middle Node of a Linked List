# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    # Prerequisite - https://leetcode.com/problems/middle-of-the-linked-list/description/
    def deleteMiddle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        slow, fast, prev = head, head, None
        if head.next is None: ## for use case where entry is only 1
            return None

        while fast is not None and fast.next is not None:
            prev=slow
            slow = slow.next
            fast = fast.next.next
        prev.next = slow.next
        return head
