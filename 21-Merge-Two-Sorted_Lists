# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        newHead = ListNode(0)
        curr = newHead
        head1,head2=list1,list2
        while head1 is not None and head2 is not None:
            if head1.val < head2.val:
                curr.next = head1
                head1=head1.next
            else:
                curr.next=head2
                head2=head2.next
            curr=curr.next    
        if head1 is None:
            curr.next=head2
        else:
            curr.next=head1
        return newHead.next                    
    
    
#   Recursive call
#    def mergeTwoLists(self, l1, l2):
#         if l1 is None:
#             return l2
#         elif l2 is None:
#             return l1
#         elif l1.val < l2.val:
#             l1.next = self.mergeTwoLists(l1.next, l2)
#             return l1
#         else:
#             l2.next = self.mergeTwoLists(l1, l2.next)
#             return l2
        
