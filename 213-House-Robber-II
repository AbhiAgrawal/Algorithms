class Solution:
    def __init__(self):
        self.memo = {}
    
    
    #exactly same as house robber problem.. instead of checking from 0 to N, check max of 1to N and 0 to N-1. 
    #Since House[1] and House[n] are adjacent, they cannot be robbed together. Therefore, the problem becomes to rob either House[1]-House[n-1] or House[2]-House[n], depending on which choice offers more money. Now the problem has degenerated to the House Robber, which is already been solved.
    def rob(self, nums: List[int]) -> int:
        if len(nums) <=2:
            return max(nums)
        
        max0ToSecondLast = self.checkMaxUsingMemo(nums, len(nums)-1)
        self.memo = {}
        nums = nums[1:]
        max1ToLast = self.checkMaxUsingMemo(nums, len(nums))
        return max(max0ToSecondLast,max1ToLast)
    
    
    def checkMaxUsingMemo(self, nums: List[int], n: int) -> int:  
        if n == 0:
            return 0
        if n == 1:
            return nums[0]
        if n == 2:
            return max(nums[0],nums[1])
        
        
        #pull the data from cache
        if n in self.memo:
            return self.memo[n]
        
        ans = max((nums[n-1] + self.checkMaxUsingMemo(nums,n-2)),self.checkMaxUsingMemo(nums,n-1))
        
        #save the data in cache
        self.memo[n] = ans
        return ans
    
        
