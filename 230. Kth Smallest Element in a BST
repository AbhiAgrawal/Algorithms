# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    #https://leetcode.com/problems/kth-smallest-element-in-a-bst/solutions/63783/two-easiest-in-order-traverse-java/?envType=study-plan-v2&envId=top-interview-150
    ##inorder traversal and count the numbers once count = k return the corresponding node.val
    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:
        res=[]
        res.append(0)
        res.append(-100)
        def traverse(node):
            if node is None:
                return
            if node.left is not None:
                traverse(node.left)
            res[0]=res[0]+1
            if res[0] == k:
                res[1] = node.val
                return
            if node.right is not None:
                traverse(node.right)
        traverse(root)
        return res[1]          
        
