# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    ##https://leetcode.com/problems/palindrome-linked-list/solutions/891218/python-3-o-n-time-and-o-1-space-with-algorithm-explanation/
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        prev=None
        curr=head
        while curr:
            newCurr=curr.next
            curr.next=prev
            prev=curr
            curr=newCurr
        return prev  

    
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        slow, fast = head, head
        while fast is not None and fast.next is not None:
            slow = slow.next
            fast = fast.next.next
        fast = head

        slow = self.reverseList(slow)    

        while slow is not None:
            if slow.val != fast.val:
                return False
            slow,fast = slow.next, fast.next
        return True
