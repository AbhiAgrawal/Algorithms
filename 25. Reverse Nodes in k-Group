# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
###prereq :   https://leetcode.com/problems/reverse-linked-list/
###https://leetcode.com/problems/reverse-nodes-in-k-group/discuss/172576/Python-or-Follow-up-of-LC206
class Solution:
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:    
        
        node,count=head,0
        while node and count<k: ##break if node is null or count == k ..
            node = node.next
            count+=1
        if count<k:##that not enough nodes.. end of list
            return head
        
        ##after reverse list is exec <--1<--2 3-->4-->None it means 2-->1--> 3-->-->None.. head is 1 so head.next = new reverse... 
        new_head,prev = self.reverseList(head,k)  
        head.next = self.reverseKGroup(new_head,k)
        return prev
        
    def reverseList(self, head: Optional[ListNode],count:int)->[ListNode]:
        prev, cur, nxt = None, head, head
        while count > 0:
            nxt = cur.next
            cur.next = prev
            prev = cur
            cur = nxt
            count -= 1
        return (cur, prev)   
        
        
        
        
        
