class Solution:
    ##chec leetcode solution v simple
    def minMeetingRooms(self, intervals: List[List[int]]) -> int:
        
        intervals.sort()
        max_count=1
        
        pq=[] ##will store number of rooms
        heapq.heappush(pq,intervals[0][1])
        for i in range(1,len(intervals)):
            start, end = intervals[i]
            if pq[0]<=start:
                heapq.heappop(pq)
            heapq.heappush(pq,end)    
        return len(pq)        
            





#     def minMeetingRooms(self, intervals: List[List[int]]) -> int:
        
#         length = len(intervals)
        
#         if(length == 0):
#             return 0
#         if(length == 1):
#             return 1
        
#         intervals.sort()
#         max_count=1
#         dictionary = defaultdict(int) ##room number to start and end 
        
#         dictionary[1] = intervals[0][1]
#         for i in range(1,len(intervals)):
#             start, end = intervals[i]
#             is_space=False
#             for j in range(1,max_count+1):
#                 #lst = dictionary[j]
#                 if start>=dictionary[j]:
#                     is_space=True
#                     dictionary[j] = end
#                     break
#             if is_space == False:
#                 dictionary[max_count+1] = end
#                 max_count+=1
#         return max_count        
            
