# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    ##see this first https://leetcode.com/problems/search-in-a-binary-search-tree/
    def closestValue(self, root: Optional[TreeNode], target: float) -> int:
        minDiff,closest = abs(root.val-target), root.val
        
        def searchClosest(node):
            if node is None:
                return
            nonlocal closest, minDiff
            diff = abs(node.val - target)
            if minDiff>diff:
                minDiff = diff
                closest = node.val
            if minDiff == 0:
                return
            if target<node.val:
                searchClosest(node.left)
            else:
                searchClosest(node.right)
                
        searchClosest(root)
        return closest


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def closestValue(self, root: TreeNode, target: float, min_diff=math.inf) -> int:
        self.min_diff,self.result = abs(root.val-target), root.val  

        def dfs(node):
            if not node:
                return
            
            ###this is for situations.. where input is 4 and 3 and target is 3.5 so we want to chose minimum bval
            if abs(node.val - target) == self.min_diff and self.result>node.val:
                self.min_diff,self.result = abs(node.val - target), node.val             
            elif abs(node.val - target) < self.min_diff:
                self.min_diff,self.result = abs(node.val - target), node.val  
            dfs(node.left)    
            dfs(node.right)

        dfs(root)
        
        return self.result
