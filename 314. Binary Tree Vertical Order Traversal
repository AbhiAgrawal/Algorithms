# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    ###leetcode nicely explains with a axis diagram.. use bfs
"""
If we look at a binary tree horizontally, each node can be aligned to a specific column, based on its relative offset to the root node of the tree.


Let us assume that the root node has a column index of 0, then its left child node would have a column index of -1 and its right child node would have a column index of +1, and so on.
"""
   def verticalOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        if not root:
            return []

        columns=defaultdict(list)
        q=deque()
        q.append([root,0])
        while q:
            node, val = q.popleft()
            columns[val].append(node.val)
            if node.left:
                q.append([node.left,val-1])
            if node.right:
                q.append([node.right,val+1])

        ##return [columns[x] for x in range(min(columns), max(columns)+1)]        
        result=[]
        for key in range(min(columns), max(columns)+1):
            result.append(columns[key])
        return result 
