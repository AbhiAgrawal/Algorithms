class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        #https://www.youtube.com/watch?v=I-l6PBeERuc&list=PL_z_8CaSLPWekqhdCPmFohncHwz8TY2Go&index=16
        
        if(amount == 0):
            return 0
        n = len(coins)
        DP = [[0 for i in range(amount+1)] for j in range(n+1)]
        
        DP[0][0] = 1
        for i in range(n+1):
            for j in range(amount+1):
                if i == 0:
                    DP[i][j] = math.inf - 1
                elif j == 0:
                    DP[i][j] = 0
                elif i == 1:
                    coin = coins[i-1]
                    if j % coin == 0:
                        DP[i][j] = j//coin
                    else:
                        DP[i][j] = math.inf - 1
                else:
                    if(coins[i-1]<= j):
                        DP[i][j] = min(DP[i-1][j],1 + DP[i][j-coins[i-1]])
                    else:
                        DP[i][j] = DP[i-1][j]
        if(DP[n][amount] == math.inf):
            return -1
        return DP[n][amount] 



###just coinChange method very short solution https://leetcode.com/problems/coin-change/solutions/2058537/python-easy-2-dp-approaches/
class Solution:
    def __init__(self):
        self.memo = {}

    def coinChangeRecursive(self, coins: List[int], amount: int) -> int:            
        def coinChangeIn(rem):
            if rem < 0:
                return math.inf
            if rem == 0:                    
                return 0              
            result=math.inf
            for x in coins:
                result=min(result, coinChangeIn(rem-x)+1)
            return result         
        
        ans = coinChangeIn(amount)
        return -1 if ans == math.inf else ans   

    def coinChange(self, coins: List[int], amount: int) -> int:                
        def coinchangeInner(rem):
            if rem<0:
                return math.inf
            if rem==0:
                return 0
            if rem in self.memo:
                return self.memo[rem]
            self.memo[rem]=min(coinchangeInner(rem-x)+1 for x in coins)
            return self.memo[rem]


        ans=coinchangeInner(amount)
        return -1 if ans==math.inf else ans
        
                
                
                

        
