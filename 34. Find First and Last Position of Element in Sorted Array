class Solution:
    ##https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/discuss/14714/16-line-Python-solution-symmetric-and-clean-binary-search-52ms
    def searchRange(self, nums, target):
        n = len(nums)
        
        
        def find_first(nums, x): ##this will find first occurence
            l,r = 0,n-1
            res = -1
            while l<=r:
                mid = l+(r-l)//2
                if nums[mid] == x:
                    res = mid ##save the result
                    r = mid-1### we watn to find first so move r
                elif nums[mid]<x:
                    l = mid+1
                else:
                    r = mid-1
            return res        
                
        def find_last(nums, x): ##this will find last occurence
            l,r = 0,n-1
            res = -1
            while l<=r:
                mid = l+(r-l)//2
                if nums[mid] == x:
                    res = mid
                    l = mid+1 ### we want to find last so move l
                elif nums[mid]<x:
                    l = mid+1
                else:
                    r = mid-1
            return res    
        
        firstPos = find_first(nums, target)
        lastPos = find_last(nums, target)
        return [firstPos, lastPos]


# from bisect import bisect, bisect_left

# class Solution:
#     def searchRange(self, nums, target):
#         l = bisect_left(nums,target)
#         r = bisect(nums,target)
#         return [-1, -1] if l == r else [l, r - 1]
