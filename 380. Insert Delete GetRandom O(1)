class RandomizedSet:
    ##leetcode v nicely explains the solution.. combination of dict(ele, index) and array list
    ##in this duplicates are not allowed
    def __init__(self):
        self.map=dict()
        self.lst = list()
        

    def insert(self, val: int) -> bool:
        if val not in self.map.keys():
            self.lst.append(val)
            self.map[val] = len(self.lst)-1 ###make key,value pair of (val, index)
            return True
        else:
            return False
        
    def remove(self, val: int) -> bool:
        if val in self.map.keys():
            idx = self.map[val]
            last_index = len(self.lst)-1
            self.lst[idx],self.lst[last_index] = self.lst[last_index], self.lst[idx] ###swap 
            self.map[self.lst[idx]]=idx ###update the map with correct index
            self.lst.pop()
            del self.map[val] ###delete the map entry
            return True
        else:
            return False
        

    def getRandom(self) -> int:
        return choice(self.lst)
        


# Your RandomizedSet object will be instantiated and called as such:
# obj = RandomizedSet()
# param_1 = obj.insert(val)
# param_2 = obj.remove(val)
# param_3 = obj.getRandom()
