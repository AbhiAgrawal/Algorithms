class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        
        #similar to subset sum problem in this sum is half of the sum of array
        #https://www.geeksforgeeks.org/subset-sum-problem-dp-25/
        sum_of_array = sum(nums)
        
        if(sum_of_array % 2 == 1):
            return False
        partSum = sum_of_array // 2
        return self.IsPartionSubSetSum(nums, len(nums), partSum)
    

    def IsPartionSubSetSum(self, nums: List[int], n:int, partSum: int)->bool:
        
        #arr = [[0 for i in range(cols)] for j in range(rows)]
        DP = [[False for i in range(partSum+1)] for j in range(n+1)]
        DP[0][0] = True
        for i in range(n+1):
            curr = nums[i-1]
            for j in range(partSum+1):
                if j == 0:
                    DP[i][j] = True
                elif i == 0:
                    DP[i][j] = False
                else:
                    if(j<curr):
                        DP[i][j] = DP[i-1][j]
                    else:
                        DP[i][j] = DP[i-1][j] or DP[i-1][j - curr]
        return DP[n][partSum]                

        
        
