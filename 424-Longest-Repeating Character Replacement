class Solution:    
    
    ###intuition https://www.youtube.com/watch?v=gqXU1UyA8pk&ab_channel=NeetCode
#### but i have written my own code
    def characterReplacement(self, st: str, k: int) -> int:
        l = 0
        countMap = {}
        n = len(st)
        max_length = k ### max length will be atleast k 
        r = k ##so initially setting l = 0, and r to k
        countMap = Counter(st[l:r+1]) ##making the map from l to r ( both inclusive)
        
        while (r < n):
            if (((r-l+1) - countMap.most_common(1)[0][1]) <= k): ## countMap.most_common(1)[0][1] returns max value in the counter 
                max_length = max(r-l+1, max_length) ### compare len of sub stri and max lenght
                r+=1 ## increment r if u got valid substr
                if (r<n): ##if incrementing r then make sure to update counter.. also check the r < n
                    countMap[st[r]]+=1      
            else:
                countMap[st[l]]-=1 ## otherwise increment l parallely remove the lth element from counter
                l+=1       
        return max_length        
            
        
