# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
##https://leetcode.com/problems/serialize-and-deserialize-bst/solution/614979
class Codec:

    def serialize(self, root: TreeNode) -> str:
        if root is None: return ""
        q=deque()
        q.append(root)
        res=[]
        while q:
            node = q.popleft()
            if node:
                q.append(node.left)
                q.append(node.right)
            res.append(str(node.val) if node else '#')
        return ",".join(res)
        

    def deserialize(self, data: str) -> TreeNode:
        if data == "": return None
        arr = data.split(',')
        root = TreeNode(arr[0])
        q = deque()
        q.append(root)
        index=0
        while q:
            node = q.popleft()
            index+=1
            if arr[index] != "#":
                left = TreeNode(arr[index])
                node.left = left
                q.append(left)
            index+=1
            if arr[index] != "#":
                right = TreeNode(arr[index])
                node.right = right
                q.append(right)
        return root   
        

# Your Codec object will be instantiated and called as such:
# Your Codec object will be instantiated and called as such:
# ser = Codec()
# deser = Codec()
# tree = ser.serialize(root)
# ans = deser.deserialize(tree)
# return ans
