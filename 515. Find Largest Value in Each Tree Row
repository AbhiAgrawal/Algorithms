# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    ##run bfs every node check the max in that level use dict to main max per row/level
    def largestValues(self, root: Optional[TreeNode]) -> List[int]:
        if not root:
            return []
        
        max_values_per_row=defaultdict(lambda: float('-inf'))
        max_level = 0
        q=deque()
        q.append([root,0]) ##node and level
        while q:
            node,lvl = q.popleft()
            max_values_per_row[lvl] = max(max_values_per_row[lvl],node.val) 
            max_level = max(max_level, lvl) ##calc maximum level of the tree
            
            for child in [node.left, node.right]:
                if child:
                    q.append([child, lvl+1])
        
        res=[]
        for i in range(0,max_level+1):
            res.append(max_values_per_row[i])
        return res    
        
        
