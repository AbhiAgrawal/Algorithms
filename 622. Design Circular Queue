class MyCircularQueue:

    def __init__(self, k: int):
        self.arr = [None] * k
        self.front = 0
        self.rear = 0

    def enQueue(self, value: int) -> bool:
        if self.isFull(): return False
        self.arr[self.rear] = value
        self.rear = (self.rear + 1) % len(self.arr)
        return True

    def deQueue(self) -> bool:
        if self.isEmpty(): return False
        self.arr[self.front] = None
        self.front = (self.front + 1) % len(self.arr)
        return True

    def Front(self) -> int:
        if self.isEmpty(): return -1
        return self.arr[self.front]

    def Rear(self) -> int:
        if self.isEmpty(): return -1
        return self.arr[self.rear-1]

    def isEmpty(self) -> bool:
        return self.front == self.rear and self.arr[self.front] is None

    def isFull(self) -> bool:
        return self.front == self.rear and self.arr[self.front] is not None
