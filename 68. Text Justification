class Solution:
    ##https://leetcode.com/problems/text-justification/discuss/191149/Readable-Python-Solution-which-beats-99.65
    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:

        '''
        :type words: List[str]
        :type maxWidth: int
        :rtype: List[str]
        '''
        n = len(words)
        L = maxWidth
        i = 0     # the index of the current word   
        ans = [] 
        
        def getKwords(i):   
            cur_len = len(words[i])
            k = 1
            while i + k < n:
                next_len = len(words[i+k]) + 1      
                if cur_len + next_len <= L:
                    k += 1
                    cur_len += next_len
                else:
                    break   
            return k
        
        
        def insertSpace(i, k):
            line = ''
            l = ' '.join(words[i:i+k])
            if k==1 or i+k==n:# if the line contains only one word or it is the last line  
                spaces = maxWidth - len(l)# we just need to left assigned it
                line = l + ' '*spaces
            else:
                spaces = maxWidth - len(l) + k-1 # total number of spaces we need insert  
                space = spaces//(k-1)# average number of spaces we should insert between two words
                left = spaces%(k-1)# number of 'left' words, i.e. words that have 1 more space than the other words on the right side
                if left > 0:
                    line += (' '*(space+1)).join(words[i:i+left]) 
                    line += ' '*(space+1)
                line += (' '*(space)).join(words[i+left:i+k])
            return line

        while i < n: 
            k = getKwords(i)  
            line = insertSpace(i, k) # create a line which contains words from words[i] to words[i+k-1]
            ans.append(line) 
            i += k 
        return ans		
        
