class Solution:
    def topKFrequent(self, words: List[str], k: int) -> List[str]:
        ##https://leetcode.com/problems/top-k-frequent-words/discuss/1551189/Python-O(nlogk)-without-customizing-comparator-worst-case-O(nlogn)-and-quickselect
        
        cnt = Counter(words)
        pq=[]
        
        for w in cnt:
            heapq.heappush(pq,[cnt[w],w])
            if len(pq)>k:
                heapq.heappop(pq)
        
        ##it is possible that 2 entries are there with count 2 and k=1, pw might evict the answer since highest is 2 and there 2 entires with that.. so we need to add all those words shose count are matching with pq count
        unique = set()
        for count,word in pq:
            unique.add(count)
        
        res=[]
        for key,val in cnt.items():
            if val in unique:
                res.append([val,key]) ##res will have all entries of count which is in pq

        res.sort(key=lambda x:(-x[0],x[1])) ##then sort based on -count and then word
        res = res[:k] ###get top k 
        return [item[1] for item in res]
            
