class Solution:
    ### similar to https://leetcode.com/problems/number-of-islands/
    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:
        maxAreaOfIsland = 0
        
        for r in range(len(grid)):
            for c in range(len(grid[0])):
                if(grid[r][c] == 1):
                    maxAreaOfIsland = max(maxAreaOfIsland,self.useBFSToCalcArea(grid, r, c))
        return maxAreaOfIsland            
    
    
    def useBFSToCalcArea(self, grid: List[List[int]], r: int, c: int) -> int:
        m = len(grid)
        n = len(grid[0])
        area = 1
        neighbours = []
        grid[r][c] = 0 #mark it 0 so that we dont check it again
        neighbours.append([r,c])
        while neighbours:
            i,j = neighbours.pop()
            for x,y in ((0,1),(1,0),(-1,0),(0,-1)):
                nr,nc = i+x,j+y
                if 0<=nr<m and 0<=nc<n and grid[nr][nc] == 1:
                    neighbours.append([nr,nc])
                    area+=1
                    grid[nr][nc] = 0
        return area        
        
        

        
