
class Bucket:
    def __init__(self):
        self.bucket=[]
        
        
    def get(self, key: int) -> int:
        for k,v in self.bucket:
            if k == key:
                return v
        return -1
            
    def remove(self, key: int) -> None:
        for i, (k,v) in enumerate(self.bucket):
            if k == key:
                del self.bucket[i]
    
    def put(self, key: int, value: int) -> None:
        for i, (k,v) in enumerate(self.bucket):
            if k == key:
                self.bucket[i]=[key,value]
                return
        self.bucket.append([key,value])    
                
        

class MyHashMap:

    def __init__(self):
        self.key_space=2069 ### prime number
        self.hashtable = [Bucket() for i in range(self.key_space)]
        

    def put(self, key: int, value: int) -> None:
        idx = key % self.key_space
        return self.hashtable[idx].put(key,value)
        

    def get(self, key: int) -> int:
        idx = key % self.key_space
        return self.hashtable[idx].get(key)
        

    def remove(self, key: int) -> None:
        idx = key % self.key_space 
        return self.hashtable[idx].remove(key)
        


# Your MyHashMap object will be instantiated and called as such:
# obj = MyHashMap()
# obj.put(key,value)
# param_2 = obj.get(key)
# obj.remove(key)
