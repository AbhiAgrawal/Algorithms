class Solution:
    ##below is O(m*n) time complexity and O(1) space complexity
    def isToeplitzMatrix(self, matrix: List[List[int]]) -> bool:
        m, n = len(matrix), len(matrix[0])
        if m<2 or n<2:
            return True
        for row in range(1, m):
            for col in range(1,n):
                if matrix[row][col] !=matrix[row-1][col-1]:
                    return False
        return True        
                
    
    
##this solution will be O(m*n) time complexity and O(m+n) space complexity
#         m = len(matrix)
#         n = len(matrix[0])
        
#         #fill starts ##for ex given in Q, these are intial cells starting from bottom left [[2, 0], [1, 0], [0, 0], [0, 1], [0, 2], [0, 3]]
#         starts=[]
#         for row in range(m-1,-1,-1):
#             starts.append([row,0])
#         for col in range(1,n):
#             starts.append([0,col])
        
        
#         for row,col in starts:
#             num = matrix[row][col]
#             i,j=row+1,col+1
#             ##run diagonally down and comparing with inital num if not matching evne for single cell.. return False
#             while i<m and j<n:
#                 if matrix[i][j] !=num:
#                     return False
#                 i+=1
#                 j+=1
#         return True    
        
        
    
    
    
        
