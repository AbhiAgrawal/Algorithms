class Solution:
    
    ###this is the solution i m using https://leetcode.com/problems/reorganize-string/discuss/113457/Simple-python-solution-using-PriorityQueue
##some important points to note: https://leetcode.com/problems/reorganize-string/discuss/113457/Simple-python-solution-using-PriorityQueue/394799
### explanation: https://leetcode.com/problems/reorganize-string/discuss/113457/Simple-python-solution-using-PriorityQueue/194973
# In essence,

# at each step, we make the currently added one ineligible for next step, by not adding it to the heap
# at each step, we make the previously added one eligible for next step, by adding it back to the heap

    def reorganizeString(self, S):
        res,count=[],Counter(S)
        pq = [(-val,key) for key,val in count.items()] ###max heap
        heapq.heapify(pq) ##heapify the max heap
        prev_val, prev_char = 0,""
        while pq:
            curr_val, curr_char = heapq.heappop(pq) ###get highest -ve value.. basically highest count
            res+=[curr_char] ##add it to result
            curr_val+=1
            if prev_val<0:
                heapq.heappush(pq,(prev_val,prev_char))
            prev_val, prev_char = curr_val, curr_char
        res="".join(res)
        if len(res) !=len(S): ###not all characters got added
            return ""
        return res
        
