class Solution:
    ##please see bitmask solution of leetcode.. also explains why sorting is needed
    ###based on https://leetcode.com/problems/subsets/
    ##check TC and SC
    ###nice article https://leetcode.com/problems/combination-sum-ii/discuss/750378/Python3-DFS-solutionstemplates-to-6-different-classic-backtracking-problems-and-more
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        n = len(nums)
        output = []
        seen=set() ##main set of strings to see if there is already an entry
        for i in range(2**n, 2**(n+1)):
            # generate bitmask, from 0..00 to 1..11
            bitmask = bin(i)[3:]
            
            
            new_list=[]
            for j in range(n):
                if bitmask[j] == '1':  
                    new_list.append(nums[j])
            str_list = [str(num) for num in new_list]     ### convert int list to str list    
            s = ",".join(str_list) ## join the list and then search in seen
            if s not in seen:
                output.append(new_list) 
                seen.add(s)
            
            #output.append([nums[j] for j in range(n) if bitmask[j] == '1'])
        
        return output
