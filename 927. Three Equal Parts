class Solution:
    #https://leetcode.com/problems/three-equal-parts/solutions/3521758/solution/
    ##take sum of all 3 and then divide into 3 parts
    def threeEqualParts(self, arr: List[int]) -> List[int]:
        ones = sum(arr)
        div = ones//3
        if ones%3 != 0: ##cannot be divided into 3 parts
            return [-1, -1]
        if div == 0: #if no zeros
            return [0,len(arr)-1]    
        
        cnt = 0                  # running count of 1's
        p1,p2,p3=0,0,0 ###find starting value of 1 in each group
        for idx, bit in enumerate(arr):
            if bit == 1:
                if cnt == 0: p1 = idx
                if cnt == div: p2 = idx
                if cnt == 2*div: p3 = idx
                cnt += 1

        while p3<len(arr):
            if arr[p1]!= arr[p2] or arr[p2]!=arr[p3] or arr[p1]!=arr[p3]:
                return [-1,-1]
            p1,p2,p3=p1+1,p2+1,p3+1    

        return [p1-1, p2]        
