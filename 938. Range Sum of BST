# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def rangeSumBST(self, root: Optional[TreeNode], low: int, high: int) -> int:
        
        def dfs(node):
            if node:
                if low<=node.val<=high:
                    self.ans+=node.val
                if low<=node.val:
                    dfs(node.left)
                if high>=node.val:
                    dfs(node.right)
                
        
        self.ans = 0
        dfs(root)
        return self.ans

#https://leetcode.com/problems/range-sum-of-bst/solutions/1213314/python-3-faster-than-99-54-simple-solution/
    def rangeSumBST(self, root: Optional[TreeNode], low: int, high: int) -> int:
        if root is None:
            return 0
        if root.val<low:
            return self.rangeSumBST(root.right, low, high)
        if root.val>high:
            return self.rangeSumBST(root.left, low, high)
        return root.val+self.rangeSumBST(root.left, low, high)+   self.rangeSumBST(root.right, low, high) 
            
            
            
        
