# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        
        ### check leetcode for inorder traversal iterative approach
        stack=[]
        res=[]
        curr=root
        while curr or stack: ### basically either or them have some val
            while curr:
                stack.append(curr)
                curr=curr.left
            curr = stack.pop()
            res.append(curr.val)
            curr=curr.right
        return res    
        
        
        

        
        
        ###easy preorder traversal
#         arr=[]
#         if root is None:
#             return
        
#         def inorder(root):
#             nonlocal arr
#             if root is None:
#                 arr.append(root.val)
#                 return
            
#             if root.left:
#                 inorder(root.left)
#             arr.append(root.val)  
#             if root.right:
#                 inorder(root.right)
#         inorder(root)
#         return arr
            
            
        
