Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.
https://leetcode.com/problems/two-sum/
class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (map.containsKey(complement)) {
                return new int[] { map.get(complement), i };
            }
            map.put(nums[i], i);
        }
        // In case there is no solution, we'll just return null
        return null;
    }
}


Roman to Integer
https://leetcode.com/problems/roman-to-integer/
class Solution {
    public int romanToInt(String s) {
        if (s == null || s.length() == 0) return 0;
        
        Map<Character, Integer> map = new HashMap<>();
        map.put('I', 1);
        map.put('V', 5);
        map.put('X', 10);
        map.put('L', 50);
        map.put('C', 100);
        map.put('D', 500);
        map.put('M', 1000);
        
        int sum = 0;
        for(int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == 'X' || s.charAt(i) == 'V') {
                if (i > 0 && s.charAt(i - 1) == 'I') sum -= 2;
            }
            if (s.charAt(i) == 'L' || s.charAt(i) == 'C') {
                if (i > 0 && s.charAt(i - 1) == 'X') sum -= 20;
            }
            if (s.charAt(i) == 'D' || s.charAt(i) == 'M') {
                if (i > 0 && s.charAt(i - 1) == 'C') sum -= 200;
            }
            sum += map.get(s.charAt(i));
        }
        return sum;
    }
}

14. Longest Common Prefix
https://leetcode.com/problems/longest-common-prefix/
class Solution {
    public String longestCommonPrefix(String[] strs) {
        if(strs==null || strs.length==0){
            return "";
        }
        for(int i=0;i<strs[0].length();i++){
            for(int j=1;j<strs.length;j++){
                if(i>=strs[j].length() || strs[0].charAt(i) != strs[j].charAt(i)){
                    return strs[0].substring(0,i);
                }
            }
        }
        return strs[0];
    }
}

20. Valid Parentheses
https://leetcode.com/problems/valid-parentheses/
class Solution {
    public boolean isValid(String s) {
        HashMap<Character,Character> maps=new HashMap<Character,Character>();
        maps.put(')','(');
        maps.put(']','[');
        maps.put('}','{');
        Stack<Character> stack=new Stack<Character>();
        for(int i=0;i<s.length();i++){
            char c=s.charAt(i);
            if(maps.containsKey(c)){
                if(stack.empty()||stack.pop()!=maps.get(c)) {
                    return false;
                }       
            }else {
                stack.push(c);
            }
        }
        return stack.empty();
    }
}

21. Merge Two Sorted Lists
https://leetcode.com/problems/merge-two-sorted-lists/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if(l1 == null) return l2;
        else if(l2 == null) return l1;
        ListNode dummy = new ListNode(0);
        ListNode curr = dummy;
        while(l1 != null && l2!= null){
            if(l1.val <= l2.val){
                curr.next = l1;
                l1 = l1.next;
            }else {
                curr.next = l2;
                l2 = l2.next;
            }
            curr = curr.next;
        }
        curr.next = l1 == null? l2:l1;
        return dummy.next;
    }
}

26. Remove Duplicates from Sorted Array
https://leetcode.com/problems/remove-duplicates-from-sorted-array/
class Solution {
    public int removeDuplicates(int[] nums) {
        if (nums.length == 0) {
            return 0;
        }
        int i = 0;
        for (int j = 1; j < nums.length; j++) {
            if (nums[j] != nums[i]) {
                i++;
                nums[i] = nums[j];
            }
        }
        return i + 1;
    }
}

28. Implement strStr() https://leetcode.com/problems/implement-strstr/
class Solution {
    public int strStr(String haystack, String needle) {
      for (int i = 0; ; i++) { // The length of haystack
        for (int j = 0; ; j++) { // The length of needle
          if (j == needle.length()) return i; // If at this point we have navigated through the entire length of needle, we have found a solution, haystack[i].
          if (i + j == haystack.length()) return -1; // This happens when we run out of elements in haystack, but there are still elements in needle. 
          if (needle.charAt(j) != haystack.charAt(i + j)) break; // We stop comparing after needle[j], so i will be incremented and cycle repeats itself. 
        }
      }
    }
}


1353. Maximum Number of Events That Can Be Attended
https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended/
class Solution {
    /**
    #1. Sort the events based on starting day of the event
#2. Now once you have this sorted events, every day check what are the events that can start today
#3. for all the events that can be started today, keep their ending time in heap.

- Wait why we only need ending times ?
i) from today onwards, we already know this event started in the past and all we need to know is when this event will finish
ii) Also, another key to this algorithm is being greedy, meaning I want to pick the event which is going to end the soonest.
- So how do we find the event which is going to end the soonest?
i) brute force way would be to look at all the event's ending time and find the minimum, this is probably ok for 1 day but as we can only attend 1 event a day,
we will end up repeating this for every day and that's why we can utilize heap(min heap to be precise) to solve the problem of finding the event with earliest ending time
#4. There is one more house cleaning step, the event whose ending time is in the past, we no longer can attend those event
#5. Last but very important step, Let's attend the event if any event to attend in the heap.
**/
    public int maxEvents(int[][] A) {
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();
        Arrays.sort(A, (a, b) -> Integer.compare(a[0], b[0])); // sort the array based on start time
        int i = 0, res = 0, d = 0, n = A.length;
        while (!pq.isEmpty() || i < n) { // continue if there are still elements or if pq is not empty
            if (pq.isEmpty()) // if pq is empty that means we didnt reach end of array
                d = A[i][0]; // set current day to start of current index of A
            while (i < n && A[i][0] <= d) //for all the events that can be started today, keep their ending time in heap.
                pq.offer(A[i++][1]); // in heap we are keeping ending time
            pq.poll(); // get min end time.
            ++res; ++d; // since we removed one item above increase the res and increment the day
            while (!pq.isEmpty() && pq.peek() < d)// There is one more house cleaning step, the event whose ending time is in the past, we no longer can attend those event
                pq.poll();
        }
        return res;
    }
}

https://leetcode.com/problems/boats-to-save-people/
881. Boats to Save People

class Solution {
    public int numRescueBoats(int[] people, int limit) {
        Arrays.sort(people);
        int ans = 0;
        int i = 0, j = people.length - 1;
        while(i<=j) {
            ans++;
            if (people[i]+people[j]<=limit) {
                i++;
            }
            j--;
        }
        return ans;
            
    }
}
